<?php
namespace app\api\controller;

use app\api\helper\FdApiHelper;
use app\component\interfaces\weixin\api\WxresultApi;
use think\Controller;
use think\Env;
use think\Request;
use think\Response;

class BaseApi extends Controller
{
    protected $procTime;
    protected $fdApiHelper;
    protected $cacheKey;
    protected $pageNo;
    protected $pageSize;
    protected $position;
    protected $lbServerId;



    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->lbServerId = Env::get('lb_server_id');
        if (empty($this->lbServerId)) {
            $this->lbServerId = '-1';
        }
        // 根据参数进行跨域设置
        header('Access-Control-Allow-Origin:*');
        header('Access-Control-Allow-Headers:Content-Type,X-Requested-With');
        header('Access-Control-Allow-Methods:POST,GET,OPTIONS');
        if (request()->isOptions()) {
            $this->response()->data("success")->send();
        }
        $this->procTime = microtime(true);
        $this->pageNo = request()->param('page_no', 1);
        $this->pageSize = request()->param('page_size', 20);
        $this->position = request()->param('position', 1);
        $this->fdApiHelper = new FdApiHelper($this->pageNo, $this->pageSize,$this->position);
    }

    /**
     *
     * @param string $data
     * @param string $type
     * @param int $code
     * @param array $header
     * @param array $options
     * @return Response
     */
    public function response($data = '', $type = '', $code = 200, array $header = [], $options = []) {
        return Response::create($data, $type, $code, $header, $options)->header('LB-SERVER-ID', $this->lbServerId);
    }

    /**
     * @param $key
     * @param string $default
     * @param string $emptyErrMsg
     * @return mixed
     */
    public function _param($key, $default = '', $emptyErrMsg = '')
    {

        $value = Request::instance()->param($key, $default);

        if ($default == $value && !empty($emptyErrMsg)) {
            $this->error($emptyErrMsg);
        }

        return $value;
    }

    public function ajaxReturn($msg,$data=[],$code='')
    {
        if($data === NULL){
            return json(['msg'=>$msg,'data'=>[],'code'=>$code]);
        }
        return json(['msg'=>$msg,'data'=>$data,'code'=>$code]);
    }

    public function getCode($res)
    {
        if(!empty($res)){
            return $code = 1;
        }else{
            return $code = -1;
        }
    }



}